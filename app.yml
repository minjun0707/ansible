    ## app sg

    - name: Fetch public IP using ipify
      ipify_facts:
      register: ipify_result

    - name: Create security group
      openstack.cloud.security_group:
        cloud: kakao-cloud
        state: present
        name: "app-sg"
      register: app_sg

    - name: Add security group rule to allow SSH
      openstack.cloud.security_group_rule:
        cloud: kakao-cloud
        security_group: "{{ app_sg.security_group.id }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        direction: ingress
        remote_ip_prefix: "{{ ipify_result.ansible_facts.ipify_public_ip }}/32"

    - name: Add security group rule to allow SSH
      openstack.cloud.security_group_rule:
        cloud: kakao-cloud
        security_group: "{{ app_sg.security_group.id }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        direction: ingress
        remote_ip_prefix: "{{bastion_floating_ip_var}}/32"

    - name: Add security group rule to allow HTTP
      openstack.cloud.security_group_rule:
        cloud: kakao-cloud
        security_group: "{{ app_sg.security_group.id }}"
        protocol: tcp
        port_range_min: 80
        port_range_max: 80 
        direction: ingress
        remote_ip_prefix: "{{web_floating_ip_var}}/32"

    - name: Create boot volume
      openstack.cloud.volume:
        cloud: kakao-cloud
        state: present
        display_name: "app_volume"
        size: 50
        bootable: true
        image: "{{ vm.image_id }}"
      register: app_boot_volume

    - name: Create app-VM using boot volume
      openstack.cloud.server:
        state: present
        cloud: kakao-cloud
        name: "app-vm"
        flavor: "{{ vm.flavor }}"
        key_name: "{{ vm.key_pair }}"
        boot_volume: "{{ app_boot_volume.volume.id }}"
        security_groups:
          - "{{ app_sg.security_group.id }}"
        nics:
          - net-id: "{{ app_network_id }}"
        wait: yes
        auto_ip: false
      register: app_vm

    - name: Set app fixed IP address as a fact
      set_fact:
        app_fixed_ip_var: "{{ item.addr }}"
      when: item["OS-EXT-IPS:type"] == "fixed"
      with_items: "{{ app_vm.server.addresses.values() | flatten(levels=1) }}"    

    - name: Debug app fixed IP
      debug:
        var: app_fixed_ip_var

    - name: Add app VM to inventory
      add_host:
        name: app-vm
        ansible_host: "{{ app_fixed_ip_var }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ vm.key_pair }}.pem"
        ansible_ssh_common_args: >-
          -o ProxyCommand="ssh -i {{ vm.key_pair }}.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W {{ app_fixed_ip_var }}:22 -q ubuntu@{{ bastion_floating_ip_var }}"
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null


    - name: Remove specific IP from known_hosts
      lineinfile:
        path: "~/.ssh/known_hosts"
        state: absent
        regexp: "^{{ app_fixed_ip_var}}[ ,]"
