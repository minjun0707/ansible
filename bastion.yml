    ## floating IP
    - name: Allocate a web floating IP
      openstack.cloud.floating_ip:
        cloud: kakao-cloud
        state: present
        server: "{{ web_vm.server.id }}"
        network: "cc0f895b-2fbe-4c34-b6c9-3455b8880f26"
      register: bastion_floating_ip
      
    - name: Set web floating IP
      set_fact:
        bastion_floating_ip_var: "{{bastion_floating_ip.floating_ip.floating_ip_address}}"

    ## web sg
    - name: Create security group
      openstack.cloud.security_group:
        cloud: kakao-cloud
        state: present
        name: "bastion-sg"
      register: security_group

    - name: Add security group rule to allow SSH
      openstack.cloud.security_group_rule:
        cloud: kakao-cloud
        security_group: "{{ security_group.security_group.id }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        direction: ingress
        remote_ip_prefix: "0.0.0.0/0"

    - name: Create boot volume
      openstack.cloud.volume:
        cloud: kakao-cloud
        state: present
        display_name: "bastion_volume"
        size: 50
        bootable: true
        image: "{{ vm.image_id }}"
      register: bastion_boot_volume

    - name: Create bastion-VM using boot volume
      openstack.cloud.server:
        state: present
        cloud: kakao-cloud
        name: "bastion-vm"
        flavor: "{{ vm.flavor }}"
        key_name: "{{ vm.key_pair }}"
        boot_volume: "{{ bastion_boot_volume.volume.id }}"
        security_groups:
          - "{{ security_group.security_group.id }}"
        nics:
          - net-id: "{{ web_network_id }}"
        wait: yes
      register: bastion_vm
      
    - name: Set fixed IP address as a fact
      set_fact:
        app_fixed_ip_var: "{{ item.addr }}"
      when: item["OS-EXT-IPS:type"] == "fixed"
      with_items: "{{ bastion_vm.server.addresses.values() | flatten(levels=1) }}"      

    # - name: Debug fixed IP
    #   debug:
    #     msg: "Fixed IP address is {{ app_fixed_ip_var }}"

    - name: Add new VM to inventory with keypair content
      add_host:
        name: bastion-vm
        ansible_host: "{{ bastion_floating_ip.floating_ip.floating_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ vm.key_pair_path }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Remove specific IP from known_hosts
      lineinfile:
        path: "~/.ssh/known_hosts"
        state: absent
        regexp: "^{{ bastion_floating_ip.floating_ip.floating_ip_address }}[ ,]"

    - name: Wait for SSH to be available from local
      local_action:
        module: wait_for
        host: "{{ bastion_floating_ip.floating_ip.floating_ip_address }}"
        port: 22
        delay: 10
        timeout: 120
        state: started
      register: result
    
    
# - name: Initialize VM with application
#   hosts: web-vm
#   become: yes
#   tasks:
#     - name: Export APP_ENDPOINT environment variable
#       shell: |
#         export APP_ENDPOINT="{{ hostvars['app-vm']['ansible_host'] }}"
#       args:
#         executable: /bin/bash  

#     - import_tasks: web-init.yml